buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$gradleBintrayVersion"
        classpath "com.github.dcendents:android-maven-gradle-plugin:$androidGradleMavenVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'si.kamino.soter'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode Integer.parseInt(VERSION_CODE)
        versionName VERSION_NAME

        consumerProguardFiles 'proguard-rules.pro'

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    lintOptions {
        checkReleaseBuilds true
        textReport true
        warningsAsErrors true
        lintConfig file('../config/check/lint/lint.xml')
    }

    // This enables long timeouts required on slow environments, e.g. Travis
    adbOptions {
        timeOutInMs 10 * 60 * 1000  // 10 minutes
        installOptions "-d", "-t"
    }

    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

configurations {
    ktlint
}

ext.okhttpVersion = '2.7.5'

dependencies {
    compile project(':oklog-core')

    provided "com.squareup.okhttp:okhttp:$okhttpVersion"

    // Unit test dependencies
    testCompile project(':oklog-core-test')
    testCompile "com.squareup.okhttp:mockwebserver:$okhttpVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"

    androidTestCompile project(':oklog-core-test')
    androidTestCompile "com.squareup.okhttp:mockwebserver:$okhttpVersion"
    androidTestCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    androidTestCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    androidTestCompile "com.crittercism.dexmaker:dexmaker:$dexmakerVersion"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-dx:$dexmakerVersion"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-mockito:$dexmakerVersion"
    androidTestCompile "com.android.support.test:runner:$testSupportVersion"
    androidTestCompile "com.android.support.test:rules:$testSupportVersion"

    // Static code rules
    checkstyleRules files('../config/soter/checkstyle-0.3.xml')
    findbugsRules files('../config/soter/findbugs-0.1.xml')
    pmdRules files('../config/soter/pmd-0.1.xml')

    ktlint "com.github.shyiko:ktlint:$ktlintVersion"
}

soter {
    checkstyle {
        enabled true
    }

    findbugs {
        enabled true
        reportLevel 'high'
    }

    pmd {
        enabled true
    }
}

task ktlint(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

apply from: '../gradle-publish/android/jcenterupload.gradle'
